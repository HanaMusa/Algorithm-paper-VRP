{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11772448,"sourceType":"datasetVersion","datasetId":7391015}],"dockerImageVersionId":31012,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\nfile_path = '/kaggle/input/last-c207-txt/C207 (1).csv'\n\ndf = pd.read_csv(file_path)\n\ndf.columns = [\"Customer\", \"X\", \"Y\", \"Demand\", \"ReadyTime\", \"DueDate\", \"ServiceTime\"]\n\ndf.head(20)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:03:17.532516Z","iopub.execute_input":"2025-05-11T17:03:17.532832Z","iopub.status.idle":"2025-05-11T17:03:17.559419Z","shell.execute_reply.started":"2025-05-11T17:03:17.532808Z","shell.execute_reply":"2025-05-11T17:03:17.558460Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Black-Winged Kite Algorithm (BWKA) for VRPTW with Nearest Neighbor Initialization\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfile_path = '/kaggle/input/last-c207-txt/C207 (1).csv'\ndf = pd.read_csv(file_path)\n\nlocations = df[[\"XCOORD.\", \"YCOORD.\"]].values\ndemands = df[\"DEMAND\"].values\nready_times = df[\"READY TIME\"].values\ndue_dates = df[\"DUE DATE\"].values\nservice_times = df[\"SERVICE TIME\"].values\n\nvehicle_capacity = 700\nnum_customers = len(df)\ndepot = 0\n\ndef compute_distance_matrix(locations):\n    n = len(locations)\n    dist_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            dist_matrix[i][j] = np.linalg.norm(locations[i] - locations[j])\n    return dist_matrix\n\ndistance_matrix = compute_distance_matrix(locations)\n\ndef is_valid_route(route, dist_matrix, demands, ready_times, due_dates, service_times):\n    current_time = 0\n    load = vehicle_capacity\n    prev = 0  \n\n    for node in route:\n        distance = dist_matrix[prev][node]\n        arrival_time = current_time + distance\n\n        if arrival_time < ready_times[node]:\n            current_time = ready_times[node]\n        elif arrival_time > due_dates[node]:\n            return False \n\n        current_time += service_times[node]\n        load -= demands[node]\n        if load < 0:\n            return False  \n\n        prev = node\n        current_time += dist_matrix[prev][0]  \n\n    return True\n\ndef nearest_neighbor(start, dist_matrix):\n    n = len(dist_matrix)\n    visited = [False] * n\n    route = [start]\n    visited[start] = True\n    current = start\n\n    while len(route) < n:\n        nearest = None\n        nearest_dist = float('inf')\n        for i in range(n):\n            if not visited[i] and dist_matrix[current][i] < nearest_dist:\n                nearest = i\n                nearest_dist = dist_matrix[current][i]\n        route.append(nearest)\n        visited[nearest] = True\n        current = nearest\n    return route\n\ndef evaluate_solution(route, dist_matrix):\n    total_distance = 0\n    prev = 0\n    for node in route:\n        total_distance += dist_matrix[prev][node]\n        prev = node\n    total_distance += dist_matrix[prev][0]\n    return total_distance\n\ndef bwka(dist_matrix, population_size=5, iterations=2000, use_nn=False):\n    n = len(dist_matrix)\n\n    def initialize_population():\n        if use_nn:\n            base_route = nearest_neighbor(0, dist_matrix)[1:]\n            population = [base_route.copy() for _ in range(population_size)]\n            for i in range(1, population_size):\n                route = base_route.copy()\n                i1, i2 = np.random.choice(len(route), 2, replace=False)\n                route[i1], route[i2] = route[i2], route[i1]\n                population[i] = route\n            return population\n        else:\n            return [list(np.random.permutation(range(1, n))) for _ in range(population_size)]\n\n    def perturb(route):\n        new_route = route.copy()\n        if np.random.rand() < 0.5:\n            i, j = sorted(np.random.choice(len(route), 2, replace=False))\n            new_route[i:j] = reversed(new_route[i:j])\n        else:\n            i, j = np.random.choice(len(route), 2, replace=False)\n            new_route[i], new_route[j] = new_route[j], new_route[i]\n        return new_route\n\n    population = initialize_population()\n    fitnesses = [evaluate_solution(r, dist_matrix) for r in population]\n    best_idx = np.argmin(fitnesses)\n    global_best = population[best_idx]\n    global_best_cost = fitnesses[best_idx]\n\n    for it in range(iterations):\n        new_population = []\n        for i in range(population_size):\n            candidate = perturb(population[i])\n            if is_valid_route(candidate, dist_matrix, demands, ready_times, due_dates, service_times):\n                candidate_cost = evaluate_solution(candidate, dist_matrix)\n                curr_cost = evaluate_solution(population[i], dist_matrix)\n                if candidate_cost < curr_cost:\n                    new_population.append(candidate)\n                else:\n                    new_population.append(population[i])\n                if candidate_cost < global_best_cost:\n                    global_best = candidate\n                    global_best_cost = candidate_cost\n            else:\n                new_population.append(population[i])  \n        population = new_population\n        if (it+1) % 20 == 0 or it == 0:\n            print(f\"Iteration {it+1}: Best Cost = {global_best_cost:.2f}\")\n    return global_best, global_best_cost\n\ndef plot_route(route, locations, title=\"Best Route\"):\n    ordered = [0] + list(route) + [0]\n    xs = [locations[i][0] for i in ordered]\n    ys = [locations[i][1] for i in ordered]\n    plt.figure(figsize=(10, 6))\n    plt.plot(xs, ys, marker='o', linestyle='--')\n    for idx in ordered:\n        plt.text(locations[idx][0], locations[idx][1], str(idx), fontsize=9)\n    plt.title(title)\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.grid(True)\n    plt.show()\n\nif __name__ == \"__main__\":\n    print(\" Running Black-Winged Kite Algorithm (BWKA) Only \")\n    best_route_bwka, best_cost_bwka = bwka(distance_matrix, population_size=20, iterations=200, use_nn=False)\n    plot_route(best_route_bwka, locations, title=\"BWKA Only Route\")\n\n    print(\"\\n Running Nearest Neighbor + BWKA \")\n    best_route_nn_bwka, best_cost_nn_bwka = bwka(distance_matrix, population_size=20, iterations=200, use_nn=True)\n    plot_route(best_route_nn_bwka, locations, title=\"Nearest Neighbor + BWKA Route\")\n\n    print(\"\\n\\n Final Comparison:\")\n    print(f\"{'Method':<20} | {'Cost':>10}\")\n    print(\"-\" * 32)\n    print(f\"{'BWKA Only':<20} | {best_cost_bwka:>10.2f}\")\n    print(f\"{'NN + BWKA':<20} | {best_cost_nn_bwka:>10.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T20:15:39.325025Z","iopub.execute_input":"2025-05-11T20:15:39.325404Z","iopub.status.idle":"2025-05-11T20:15:40.498711Z","shell.execute_reply.started":"2025-05-11T20:15:39.325381Z","shell.execute_reply":"2025-05-11T20:15:40.497678Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Particle Swarm Optimization for Vehicle Routing Problem with Time Windows (VRPTW)\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom math import sqrt\nimport random\n\nfile_path = '/kaggle/input/last-c207-txt/C207 (1).csv'\ndf = pd.read_csv(file_path)\ndef load_vrptw_data(path):\n    df = pd.read_csv(path)\n    df.columns = [col.strip().upper() for col in df.columns]\n    df.rename(columns={\n        'CUST NO.': 'id',\n        'XCOORD.': 'x',\n        'YCOORD.': 'y',\n        'DEMAND': 'demand',\n        'READY TIME': 'ready_time',\n        'DUE DATE': 'due_date',\n        'SERVICE TIME': 'service_time',\n        'SERVICE TI': 'service_time'\n    }, inplace=True)\n    return df.to_dict('records')\n\ndef euclidean_distance(x1, y1, x2, y2):\n    return sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\ndef evaluate_solution(route, customers, vehicle_capacity=200):\n    depot = customers[0]\n    total_distance = 0\n    load = 0\n    time = 0\n    penalty = 0\n    current = depot\n    routes = [[0]]\n\n    for idx in route:\n        cust = customers[idx]\n        travel_time = euclidean_distance(current['x'], current['y'], cust['x'], cust['y'])\n        arrival_time = time + travel_time\n\n        if load + cust['demand'] > vehicle_capacity or arrival_time > cust['due_date']:\n            total_distance += euclidean_distance(current['x'], current['y'], depot['x'], depot['y'])\n            current = depot\n            load = 0\n            time = 0\n            routes.append([0])\n            travel_time = euclidean_distance(current['x'], current['y'], cust['x'], cust['y'])\n            arrival_time = travel_time\n\n        time = max(arrival_time, cust['ready_time']) + cust['service_time']\n        load += cust['demand']\n        total_distance += travel_time\n        current = cust\n        routes[-1].append(idx)\n\n    total_distance += euclidean_distance(current['x'], current['y'], depot['x'], depot['y'])\n    routes[-1].append(0)\n    return total_distance + penalty, routes\n\ndef initialize_particles(n_pop, n_customers):\n    particles = []\n    for _ in range(n_pop):\n        position = list(np.random.permutation(range(1, n_customers)))\n        velocity = []\n        particles.append({'position': position, 'velocity': velocity, 'best_pos': position, 'best_cost': float('inf')})\n    return particles\n\ndef pso_vrptw(customers, n_pop=30, max_iter=100, c1=1.5, c2=1.5, w=0.7, wdamp=0.99):\n    n_customers = len(customers)\n    particles = initialize_particles(n_pop, n_customers)\n    gbest = {'position': None, 'cost': float('inf')}\n\n    for p in particles:\n        cost, _ = evaluate_solution(p['position'], customers)\n        p['best_pos'] = p['position'][:]\n        p['best_cost'] = cost\n        if cost < gbest['cost']:\n            gbest['position'] = p['position'][:]\n            gbest['cost'] = cost\n\n    for it in range(max_iter):\n        for p in particles:\n            new_pos = p['position'][:]\n            if random.random() < 0.3:\n                i, j = random.sample(range(len(new_pos)), 2)\n                new_pos[i], new_pos[j] = new_pos[j], new_pos[i]\n\n            cost, _ = evaluate_solution(new_pos, customers)\n            if cost < p['best_cost']:\n                p['best_pos'] = new_pos[:]\n                p['best_cost'] = cost\n                if cost < gbest['cost']:\n                    gbest['position'] = new_pos[:]\n                    gbest['cost'] = cost\n\n        w *= wdamp\n        print(f\"Iteration {it+1}, Best Cost: {gbest['cost']:.2f}\")\n\n    return gbest\n\ndef plot_routes(customers, routes):\n    plt.figure(figsize=(10, 8))\n    for route in routes:\n        x = [customers[i]['x'] for i in route]\n        y = [customers[i]['y'] for i in route]\n        plt.plot(x, y, marker='o')\n    for cust in customers:\n        plt.text(cust['x'], cust['y'], str(cust['id']), fontsize=8)\n    plt.title(\"VRPTW Routes via PSO\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.grid(True)\n    plt.show()\n\nif __name__ == \"__main__\":\n    dataset_path = \"/kaggle/input/last-c207-txt/C207 (1).csv\"  \n    customers = load_vrptw_data(dataset_path)\n    best = pso_vrptw(customers, n_pop=50, max_iter=200)\n    print(\"\\n Best Route Found with Cost:\", best['cost'])\n    _, routes = evaluate_solution(best['position'], customers)\n    plot_routes(customers, routes)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:38:18.808578Z","iopub.execute_input":"2025-05-11T17:38:18.808969Z","iopub.status.idle":"2025-05-11T17:38:20.529437Z","shell.execute_reply.started":"2025-05-11T17:38:18.808941Z","shell.execute_reply":"2025-05-11T17:38:20.528421Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Gray wolf algorithm\nimport pandas as pd\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\n\n\ndef load_vrptw_data(path='/kaggle/input/last-c207-txt/C207 (1).csv'):\n    df = pd.read_csv(path)\n\n    df.columns = [col.strip().upper() for col in df.columns]\n    rename_map = {\n        'CUST NO.': 'id',\n        'XCOORD.': 'x',\n        'YCOORD.': 'y',\n        'DEMAND': 'demand',\n        'READY TIME': 'ready_time',\n        'DUE DATE': 'due_date',\n        'SERVICE TIME': 'service_time',\n        'SERVICE TI': 'service_time'\n    }\n    df.rename(columns=rename_map, inplace=True)\n\n    return df.to_dict('records')\n\n\ndef euclidean_distance(x1, y1, x2, y2):\n    return math.hypot(x2 - x1, y2 - y1)\n\n\ndef evaluate_solution(solution, customers, vehicle_capacity=700):\n    total_distance = 0\n    time = 0\n    load = 0\n    current_customer = customers[0]  \n    route = [[0]]  \n\n    for idx in solution:\n        customer = customers[idx]\n        travel_time = euclidean_distance(current_customer['x'], current_customer['y'], customer['x'], customer['y'])\n        arrival_time = time + travel_time\n\n        if (load + customer['demand'] > vehicle_capacity or arrival_time > customer['due_date']):\n            total_distance += euclidean_distance(current_customer['x'], current_customer['y'],\n                                                 customers[0]['x'], customers[0]['y'])\n            time = 0\n            load = 0\n            current_customer = customers[0]\n            route.append([0])\n            travel_time = euclidean_distance(current_customer['x'], current_customer['y'], customer['x'], customer['y'])\n            arrival_time = time + travel_time\n\n        time = max(arrival_time, customer['ready_time']) + customer['service_time']\n        load += customer['demand']\n        total_distance += travel_time\n        route[-1].append(idx)\n        current_customer = customer\n\n    total_distance += euclidean_distance(current_customer['x'], current_customer['y'], customers[0]['x'], customers[0]['y'])\n    route[-1].append(0)\n    return total_distance, route\n\n\ndef initial_position_vrptw(pack_size, customer_size, target_function, customers):\n    position = []\n    for _ in range(pack_size):\n        sol = list(np.random.permutation(range(1, customer_size)))\n        cost, _ = target_function(sol, customers)\n        position.append(sol + [cost])\n    return np.array(position, dtype=object)\n\n\ndef update_position_vrptw(position, alpha, beta, delta, a_linear_component, target_function, customers):\n    updated_position = []\n    n = len(alpha)\n\n    for pos in position:\n        wolf = pos[:-1]\n        new_wolf = wolf.copy()\n\n        for i in range(n):\n            r1, r2 = np.random.rand(), np.random.rand()\n            A1 = 2 * a_linear_component * r1 - a_linear_component\n            C1 = 2 * r2\n            D_alpha = abs(C1 * alpha[i] - wolf[i])\n            x1 = int(abs(alpha[i] - A1 * D_alpha)) % n + 1\n\n            r1, r2 = np.random.rand(), np.random.rand()\n            A2 = 2 * a_linear_component * r1 - a_linear_component\n            C2 = 2 * r2\n            D_beta = abs(C2 * beta[i] - wolf[i])\n            x2 = int(abs(beta[i] - A2 * D_beta)) % n + 1\n\n            r1, r2 = np.random.rand(), np.random.rand()\n            A3 = 2 * a_linear_component * r1 - a_linear_component\n            C3 = 2 * r2\n            D_delta = abs(C3 * delta[i] - wolf[i])\n            x3 = int(abs(delta[i] - A3 * D_delta)) % n + 1\n\n            new_wolf[i] = [x1, x2, x3][np.random.randint(0, 3)]\n\n        seen = set()\n        new_solution = []\n        for val in new_wolf:\n            if val not in seen and 1 <= val < len(customers):\n                new_solution.append(val)\n                seen.add(val)\n\n        # أضف القيم المفقودة\n        for i in range(1, len(customers)):\n            if i not in seen:\n                new_solution.append(i)\n\n        cost, _ = target_function(new_solution, customers)\n        updated_position.append(new_solution + [cost])\n\n    return np.array(updated_position, dtype=object)\n\n\n# GWO Main\ndef grey_wolf_optimizer_vrptw(pack_size, customers, iterations, target_function):\n    customer_size = len(customers)\n    position = initial_position_vrptw(pack_size, customer_size, target_function, customers)\n    alpha = min(position, key=lambda x: x[-1])\n    beta = sorted(position, key=lambda x: x[-1])[1]\n    delta = sorted(position, key=lambda x: x[-1])[2]\n\n    for t in range(iterations):\n        print(f\"Iteration {t} - Best Cost: {alpha[-1]}\")\n        a = 2 - t * (2 / iterations)\n        position = update_position_vrptw(position, alpha[:-1], beta[:-1], delta[:-1], a, target_function, customers)\n        sorted_pack = sorted(position, key=lambda x: x[-1])\n        alpha, beta, delta = sorted_pack[0], sorted_pack[1], sorted_pack[2]\n\n    return alpha\n\n\ndef plot_routes(routes, customers):\n    for route in routes:\n        x = [customers[i]['x'] for i in route]\n        y = [customers[i]['y'] for i in route]\n        plt.plot(x, y, marker='o')\n    plt.title('Best VRPTW Routes')\n    plt.xlabel('X Coordinate')\n    plt.ylabel('Y Coordinate')\n    plt.grid(True)\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    customers = load_vrptw_data('/kaggle/input/last-c207-txt/C207 (1).csv')\n    best_solution = grey_wolf_optimizer_vrptw(\n        pack_size=30,\n        customers=customers,\n        iterations=100,\n        target_function=evaluate_solution\n    )\n\n    print(\"\\nBest Routes:\", best_solution[:-1])\n    print(\"\\nLowest cost(dist):\", best_solution[-1])\n    _, routes = evaluate_solution(best_solution[:-1], customers)\n    plot_routes(routes, customers)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T17:40:19.251817Z","iopub.execute_input":"2025-05-11T17:40:19.252246Z","iopub.status.idle":"2025-05-11T17:40:22.728555Z","shell.execute_reply.started":"2025-05-11T17:40:19.252219Z","shell.execute_reply":"2025-05-11T17:40:22.727354Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Simulated Annealing \nimport numpy as np\nimport pandas as pd\n\nfile_path = '/kaggle/input/last-c207-txt/C207 (1).csv'  \n\nwith open(file_path, 'r') as file:\n    lines = file.readlines()\n  \ndf.columns = [\"Customer\", \"X\", \"Y\", \"Demand\", \"ReadyTime\", \"DueDate\", \"ServiceTime\"]\nlocations = df[[\"X\", \"Y\"]].values\n\ndef compute_distance_matrix(locs):\n    n = len(locs)\n    dist = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            dist[i][j] = np.linalg.norm(locs[i] - locs[j])\n    return dist\n\ndistance_matrix = compute_distance_matrix(locations)\n\ndef evaluate_route(route, distance_matrix):\n    cost = 0\n    prev = 0\n    for node in route:\n        cost += distance_matrix[prev][node]\n        prev = node\n    cost += distance_matrix[prev][0]\n    return cost\n\ndef generate_random_solution(num_customers):\n    return list(np.random.permutation(range(1, num_customers)))  \n\ndef perturb(route):\n    new_route = route.copy()\n    i, j = np.random.choice(len(route), 2, replace=False)\n    new_route[i], new_route[j] = new_route[j], new_route[i]\n    return new_route\n\ndef bad_simulated_annealing(distance_matrix, num_customers, initial_temp=1000, cooling_rate=0.90, iterations=100):\n    current_solution = generate_random_solution(num_customers)\n    best_solution = current_solution.copy()\n    current_cost = evaluate_route(current_solution, distance_matrix)\n    best_cost = current_cost\n    temp = initial_temp\n\n    for _ in range(iterations):\n        new_solution = perturb(current_solution)\n        new_cost = evaluate_route(new_solution, distance_matrix)\n        if new_cost < current_cost or np.random.rand() < np.exp((current_cost - new_cost) / temp):\n            current_solution = new_solution\n            current_cost = new_cost\n            if new_cost < best_cost:\n                best_solution = new_solution\n                best_cost = new_cost\n        temp *= cooling_rate \n    return best_solution, best_cost\n\nnum_customers = len(df)\nbad_route, bad_cost = bad_simulated_annealing(distance_matrix, num_customers)\n\nprint(\" Simulated Annealing \")\nprint(\"Route:\", bad_route)\nprint(\"Total Distance:\", round(bad_cost, 2))\n\nimport matplotlib.pyplot as plt\n\ndef plot_route(route, locations, title=\"Simulated Annealing \"):\n    ordered = [0] + route + [0] \n    xs = [locations[i][0] for i in ordered]\n    ys = [locations[i][1] for i in ordered]\n\n    plt.figure(figsize=(10, 6))\n    plt.plot(xs, ys, marker='o', linestyle='-', color='red')\n    for idx in ordered:\n        plt.text(locations[idx][0], locations[idx][1], str(idx), fontsize=8)\n    plt.title(title)\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.grid(True)\n    plt.show()\n\nplot_route(bad_route, locations)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-11T20:17:25.557942Z","iopub.execute_input":"2025-05-11T20:17:25.558237Z","iopub.status.idle":"2025-05-11T20:17:26.027673Z","shell.execute_reply.started":"2025-05-11T20:17:25.558217Z","shell.execute_reply":"2025-05-11T20:17:26.026587Z"}},"outputs":[],"execution_count":null}]}